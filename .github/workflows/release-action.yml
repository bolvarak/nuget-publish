name: 'Action Release'

on:
  push:
    tags:
      - 'v*'

jobs:

  ## Build & Upload Binary Artifacts
  build-and-upload:
    name: 'Build Artifacts'
    runs-on: 'ubuntu-latest'
    strategy:
      matrix:
        target: [
          { binary: 'NuGet.Publish', final: 'NuGet.Publish.arm32', name: 'Linux arm32', runtime: 'linux-arm' },
          { binary: 'NuGet.Publish', final: 'NuGet.Publish.arm64', name: 'Linux arm64', runtime: 'linux-arm64' },
          { binary: 'NuGet.Publish', final: 'NuGet.Publish.alpine.arm64', name: 'Alpine Linux arm64', runtime: 'linux-musl-arm64' },
          { binary: 'NuGet.Publish', final: 'NuGet.Publish.alpine.amd64', name: 'Alpine Linux amd64', runtime: 'linux-musl-x64' },
          { binary: 'NuGet.Publish', final: 'NuGet.Publish.amd64', name: 'Linux amd64', runtime: 'linux-x64' },
          { binary: 'NuGet.Publish', final: 'NuGet.Publish.macos.arm64', name: 'macOS arm64', runtime: 'osx-arm64' },
          { binary: 'NuGet.Publish', final: 'NuGet.Publish.macos.amd64', name: 'macOS amd64', runtime: 'osx-x64' },
          { binary: 'NuGet.Publish.exe', final: 'NuGet.Publish.arm64.exe', name: 'Windows arm64', runtime: 'win-arm64' },
          { binary: 'NuGet.Publish.exe', final: 'NuGet.Publish.amd64.exe', name: 'Windows amd64', runtime: 'win-x64' },
          { binary: 'NuGet.Publish.exe', final: 'NuGet.Publish.i386.exe', name: 'Windows i386', runtime: 'win-x86' }
        ]
    steps:

      ## Checkout the repository
      - name: 'Checkout'
        uses: 'actions/checkout@v4'

      ## Setup .NET
      - name: 'Setup .NET'
        uses: 'actions/setup-dotnet@v3'
        with:
          dotnet-version: '8.x'

      ## Build Target Artifact
      - name: 'Build Target Artifact: ${{ matrix.target.name }}'
        run: |
          dotnet publish 'NuGet.Publish.csproj' \
            --configuration 'Release' \
            --force \
            --nologo \
            --output 'publish-${{ matrix.target.runtime }}' \
            --runtime '${{ matrix.target.runtime }}' \
            --self-contained true \
            --verbosity 'minimal';

      ## Upload Target Artifact
      - name: 'Upload Target Artifact: ${{ matrix.target.name }}'
        uses: 'actions/upload-artifact@v3'
        with:
          name: '${{ matrix.target.final }}'
          path: 'publish-${{ matrix.target.runtime }}/${{ matrix.target.binary }}'
          retention-days: 1

  release:
    name: 'Release Action'
    needs: 'build-and-upload'
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'write'
    steps:

      ## Ensure our Directory Structure exists
      - name: 'Directory Structure'
        run: |
          mkdir -p '${{ github.workspace }}/download';

      ## Download the artifacts
      - name: 'Download Artifacts'
        uses: 'actions/download-artifact@v3'
        with:
          path: '${{ github.workspace }}/download'

      ## We'll need to checkout our repository
      - name: 'Repository Checkout'
        uses: 'actions/checkout@v4'

      ## Release our Action
      - name: 'Release Action'
        uses: 'ncipollo/release-action@v1.13.0'
        with:
          artifacts: '${{ github.workspace }}/download/*'
          bodyFile: 'release-body.md'
