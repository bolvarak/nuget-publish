## Define the author of this action
author: 'bolvarak'

## Define our branding details
branding:
  color: blue
  icon: chevron-up

## Define the name of this action
name: 'NuGet Build & Publish'

## Describe this action
description: 'Build a .NET project and publish it to a NuGet Server.'

## Define the inputs to this action
inputs:

  configuration:
    default: 'Release'
    description: 'The build configuration to use when building the project or solution.  (values: Debug|Release, default: Release)'
    required: false

  github-organization:
    description: 'The GitHub Organization to publish the generated package to which forces the use of GitHub''s NuGet Servers.'
    required: false

  nuget-api-key:
    description: 'The API key which is used to authenticate with the NuGet server.'
    required: true

  nuget-auth-for-build:
    default: 'false'
    description: 'Flag that denotes whether to authenticate with the NuGet Server for the build process.'
    required: false

  nuget-password:
    description: 'The password with which to authenticate with the NuGet Server during the build process.'
    required: false

  nuget-username:
    description: 'The username with which to authenticate with the NuGet Server during the build process.'
    required: false

  nuspec-file:
    description: 'The path, relative to the root of the repository, to the NuSpec file.'
    required: false

  output:
    default: 'Silent'
    description: 'The output format of the application.  (values: Json|Plain|Silent|Xml, default: Silent)'
    required: false

  output-file:
    description: 'The path, relative to the root of the repository, to the file to which the output should be written.  (default: github.output)'
    required: false

  package-name:
    description: 'The name of the package to generate, that will be published to the NuGet Server.'
    required: false

  platform:
    default: 'AnyCpu'
    description: 'The platform to use when building the project or solution.  (values: AnyCpy|Arm64|x64|x86, default: AnyCpu)'
    required: false

  project:
    description: 'The path, relative to the root of the repository, to the project or solution file to be packaged.'
    required: true

  runner-arch:
    default: 'x64'
    description: 'The architecture to use when building the project or solution.  (values: arm64|x64, default: x64)'
    required: false

  runner-os:
    default: 'linux'
    description: 'The operating system to use when building the project or solution.  (values: alpine|linux|macos|windows, default: linux)'
    required: false

  runtime:
    default: '8.x'
    description: 'The runtime to use when building the project or solution.  (values: 8.x|7.x|6.x, default: 8.x)'
    required: false

  scan-for-package-name:
    default: 'false'
    description: 'Flag that denotes whether to scan the project or solution file in an attempt to find the package name preferring PackageId over AssemblyName over <project>.  (default: false)'
    required: false

  verbosity:
    default: 'Minimal'
    description: 'The output level for the build process.  (values: Detailed|Diagnostic|Minimal|Normal|Quiet, default: Minimal)'
    required: false

  version:
    description: 'The static version for the NuGet package.'
    required: false

## Define the runtime of this action
runs:
  using: 'composite'
  steps:

    ## We'll need a temporary directory
    - name: 'Download Directory'
      shell: 'bash'
      run: |
        echo "NUGET_PUBLISH_TEMP_DIR=$(mktemp -d)" >> "${GITHUB_ENV}";

    ## We'll need our binary (Alpine Linux)
    - name: 'Download NuGet.Publish (Alpine Linux)'
      if: inputs.runner-os == 'alpine'
      shell: 'bash'
      run: |
        curl -L -o '${{ env.NUGET_PUBLISH_TEMP_DIR }}/NuGet.Publish' \
          'https://github.com/bolvarak/nuget-publish/releases/latest/download/NuGet.Publish.alpine.${{ inputs.runner-arch }}';

    ## We'll need our binary (Linux)
    - name: 'Download NuGet.Publish (Linux)'
      if: inputs.runner-os == 'linux'
      shell: 'bash'
      run: |
        curl -L -o '${{ env.NUGET_PUBLISH_TEMP_DIR }}/NuGet.Publish' \
          'https://github.com/bolvarak/nuget-publish/releases/latest/download/NuGet.Publish.${{ inputs.runner-arch }}';

    ## We'll need our binary (macOS)
    - name: 'Download NuGet.Publish (macOS)'
      if: inputs.runner-os == 'macos'
      shell: 'bash'
      run: |
        curl -L -o '${{ env.NUGET_PUBLISH_TEMP_DIR }}/NuGet.Publish' \
          'https://github.com/bolvarak/nuget-publish/releases/latest/download/NuGet.Publish.macos.${{ inputs.runner-arch }}';

    ## We'll need our binary (Windows)
    - name: 'Download NuGet.Publish (Windows)'
      if: inputs.runner-os == 'windows'
      shell: 'bash'
      run: |
        curl -L -o '${{ env.NUGET_PUBLISH_TEMP_DIR }}/NuGet.Publish' \
          'https://github.com/bolvarak/nuget-publish/releases/latest/download/NuGet.Publish.${{ inputs.runner-arch }}.exe';

    ## We'll need to make our binary executable
    - name: 'NuGet.Publish Permissions'
      shell: 'bash'
      run: |
        chmod +x '${{ env.NUGET_PUBLISH_TEMP_DIR }}/NuGet.Publish';

    ## Setup .NET
    - name: 'Setup .NET (${{ inputs.runtime }})'
      uses: 'actions/setup-dotnet@v3'
      with:
        dotnet-version: '${{ inputs.runtime }}'

    ## Execute our binary
    - name: 'NuGet.Publish'
      shell: 'bash'
      run: |
        ${{ env.NUGET_PUBLISH_TEMP_DIR }}/NuGet.Publish publish \
          --configuration '${{ inputs.configuration }}' \
          --github-organization '${{ inputs.github-organization }}' \
          --nuget-api-key '${{ inputs.nuget-api-key }}' \
          --nuget-auth-for-build '${{ inputs.nuget-auth-for-build }}' \
          --nuget-password '${{ inputs.nuget-password == '' && inputs.nuget-api-key || inputs.nuget-password }}' \
          --nuget-username '${{ inputs.nuget-username == '' && github.actor || inputs.nuget-username }}' \
          --nuspec-file '${{ inputs.nuspec-file }}' \
          --output '${{ inputs.output }}' \
          --output-file '${{ inputs.output-file == '' && github.output || inputs.output-file }}' \
          --package-name '${{ inputs.package-name }}' \
          --platform '${{ inputs.platform }}' \
          --project '${{ inputs.project }}' \
          --scan-for-package-name '${{ inputs.scan-for-package-name }}' \
          --verbosity '${{ inputs.verbosity }}' \
          --version '${{ inputs.version }}' \
          --working-directory '${{ github.workspace }}';

    ## We'll need to cleanup our temporary directory
    - name: 'Cleanup'
      shell: 'bash'
      run: |
        rm -rf "${{ env.NUGET_PUBLISH_TEMP_DIR }}";
